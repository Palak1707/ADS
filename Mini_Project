import tkinter as tk
import random

# Binary Search Tree Node
class Node:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None

# Binary Search Tree
class BinarySearchTree:
    def __init__(self):
        self.root = None

    def insert(self, key):
        self.root = self._insert(self.root, key)

    def _insert(self, node, key):
        if node is None:
            return Node(key)
        if key < node.key:
            node.left = self._insert(node.left, key)
        else:
            node.right = self._insert(node.right, key)
        return node

    def delete(self, key):
        self.root = self._delete(self.root, key)

    def _delete(self, node, key):
        if node is None:
            return node
        if key < node.key:
            node.left = self._delete(node.left, key)
        elif key > node.key:
            node.right = self._delete(node.right, key)
        else:
            if node.left is None:
                return node.right
            elif node.right is None:
                return node.left
            node.key = self._min_value(node.right)
            node.right = self._delete(node.right, node.key)
        return node

    def _min_value(self, node):
        while node.left is not None:
            node = node.left
        return node.key

    def search(self, key):
        return self._search(self.root, key)

    def _search(self, node, key):
        if node is None or node.key == key:
            return node
        if key < node.key:
            return self._search(node.left, key)
        return self._search(node.right, key)

    def inorder_traversal(self):
        return self._inorder_traversal(self.root)

    def _inorder_traversal(self, node):
        if node is not None:
            return self._inorder_traversal(node.left) + [node.key] + self._inorder_traversal(node.right)
        return []

# Create a GUI window
window = tk.Tk()
window.title("Binary Search Tree Operations")

canvas = tk.Canvas(window, width=400, height=400)
canvas.pack()

bst = BinarySearchTree()

def insert_button_click():
    key = int(entry.get())
    bst.insert(key)
    display_tree()

def delete_button_click():
    key = int(entry.get())
    bst.delete(key)
    display_tree()

def search_button_click():
    key = int(entry.get())
    node = bst.search(key)
    if node:
        result_label.config(text=f"{key} found in the tree.")
    else:
        result_label.config(text=f"{key} not found in the tree.")

def display_tree():
    canvas.delete("all")
    display_tree_helper(bst.root, 200, 50, 150)

def display_tree_helper(node, x, y, step):
    if node:
        canvas.create_oval(x - 10, y - 10, x + 10, y + 10)
        canvas.create_text(x, y, text=str(node.key))
        if node.left:
            canvas.create_line(x, y, x - step, y + 50)
            display_tree_helper(node.left, x - step, y + 50, step // 2)
        if node.right:
            canvas.create_line(x, y, x + step, y + 50)
            display_tree_helper(node.right, x + step, y + 50, step // 2)

# Entry field and buttons
entry_label = tk.Label(window, text="Enter a key:")
entry_label.pack()
entry = tk.Entry(window)
entry.pack()
insert_button = tk.Button(window, text="Insert", command=insert_button_click)
insert_button.pack()
delete_button = tk.Button(window, text="Delete", command=delete_button_click)
delete_button.pack()
search_button = tk.Button(window, text="Search", command=search_button_click)
search_button.pack()
result_label = tk.Label(window, text="")
result_label.pack()

# Initial display of the tree
display_tree()

window.mainloop()
